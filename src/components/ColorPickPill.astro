---
interface Props {
  color: {
    name: string
    label: string
    activeColor: {
      light: string
      dark: string
    }
  }
  selected?: string
}

const { color, selected } = Astro.props
// Cannot determine the selected color during SSR, will handle in client-side script
const isSelected = color.name === selected;
---

<button
  class:list={[
    'inline-flex items-center whitespace-nowrap rounded-md text-sm font-medium transition-colors',
    'focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring',
    'disabled:pointer-events-none disabled:opacity-50 border bg-background shadow-sm',
    'hover:bg-accent hover:text-accent-foreground py-2 h-8 justify-start px-2 color-option',
    isSelected ? 'active border-foreground border-2' : 'border-input',
  ]}
  data-color-value={color.name}
  data-color-hex-light={color.activeColor.light}
  data-color-hex-dark={color.activeColor.dark}
>
  <span
    class="h-4 w-4 rounded-full flex items-center justify-center"
    style="background-color: hsl(var(--color-hex));"
    data-color-pill
  ></span>
  <span class="ml-2 text-xs capitalize mt-px">{color.label}</span>
</button>

<script>
// Initialize color and selected state settings
function updateColorHexes() {
  const isDark = document.documentElement.classList.contains('dark')
  document.querySelectorAll('[data-color-pill]').forEach((pill) => {
    const button = pill.closest('button')
    if (button) {
      const hexLight = button.getAttribute('data-color-hex-light')
      const hexDark = button.getAttribute('data-color-hex-dark')
      const hex = isDark ? hexDark : hexLight
      pill.setAttribute('style', `background-color: hsl(${hex})`)
    }
  })
}

// Get current theme color
function getCurrentColorTheme() {
  const htmlClasses = document.documentElement.classList
  let currentTheme = 'zinc' // Default value

  htmlClasses.forEach((cls) => {
    if (cls.startsWith('theme-')) {
      currentTheme = cls.replace('theme-', '')
    }
  })

  return currentTheme
}

// Update selected state of all color options
function updateSelectedState() {
  const currentTheme = getCurrentColorTheme()
  document.querySelectorAll('.color-option').forEach((button) => {
    const colorValue = button.getAttribute('data-color-value')
    if (colorValue === currentTheme) {
      button.classList.add('active')
      button.classList.add('border-foreground')
      button.classList.add('border-2')
      button.classList.remove('border-input')
    }
    else {
      button.classList.remove('active')
      button.classList.remove('border-foreground')
      button.classList.remove('border-2')
      button.classList.add('border-input')
    }
  })
}

// Initialize
function initialize() {
  updateColorHexes()
  updateSelectedState()
}

// Initialize after page load
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initialize)
}
else {
  initialize()
}

// Listen for theme changes to update colors and selected state
const observer = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (
      mutation.target === document.documentElement
      && mutation.attributeName === 'class'
    ) {
      updateColorHexes()
      updateSelectedState()
    }
  })
})

observer.observe(document.documentElement, { attributes: true })

// Add click event for buttons
document.querySelectorAll('[data-color-value]').forEach((button) => {
  button.addEventListener('click', () => {
    const colorValue = button.getAttribute('data-color-value')

    // Force immediate save to localStorage and update DOM
    const forceUpdateTheme = (theme: string | null) => {
      // Remove all current color theme classes
      document.documentElement.classList.forEach((cls) => {
        if (cls.startsWith('theme-')) {
          document.documentElement.classList.remove(cls)
        }
      })

      // Add new color theme class
      document.documentElement.classList.add(`theme-${theme}`)

      // Immediately save to localStorage - use correct key name
      try {
        localStorage.setItem('destyler-color-theme', theme || 'zinc')
      }
      catch (e) {
        console.warn('Failed to save color theme to localStorage:', e)
      }

      // Update UI state
      updateSelectedState()
    }

    // Apply and save color change
    forceUpdateTheme(colorValue)

    // Trigger custom event for parent component to listen
    button.dispatchEvent(
      new CustomEvent('color-selected', {
        detail: { value: colorValue },
        bubbles: true,
      }),
    );
  })
})
</script>
