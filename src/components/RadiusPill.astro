---
interface Props {
  radius: number;
  selected?: number;
}

const { radius, selected } = Astro.props;
// Cannot determine the selected radius during SSR, will handle in client-side script
const isSelected = radius === selected;
---

<button
  class:list={[
    'inline-flex items-center whitespace-nowrap rounded-md text-sm font-medium transition-colors',
    'focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring',
    'disabled:pointer-events-none disabled:opacity-50 border bg-background shadow-sm',
    'hover:bg-accent hover:text-accent-foreground py-2 h-8 justify-start px-2 radius-option',
    isSelected ? 'active border-foreground border-2' : 'border-input',
  ]}
  data-radius-value={radius}
>
  <span
    class="h-4 w-4 flex items-center justify-center border-l border-t border-primary/50"
    style={`border-radius: ${radius}rem 0 0 0;`}
    data-radius-pill
  />
  <span class="ml-2 text-xs mt-px">{radius}</span>
</button>

<script>
// Get current radius setting
function getCurrentRadius() {
  try {
    // First try to get from localStorage as it's the most accurate source
    const savedRadius = localStorage.getItem('destyler-radius');
    if (savedRadius !== null) {
      return parseFloat(savedRadius);
    }

    // If not in localStorage, get from CSS variable
    const radiusVar = getComputedStyle(document.documentElement).getPropertyValue('--radius').trim();
    if (radiusVar) {
      const match = radiusVar.match(/^([\d.]+)rem$/);
      if (match) {
        return parseFloat(match[1]);
      }
    }

    return 0.5;
  } catch (e) {
    return 0.5;
  }
}

// Update selected state for all radius options
function updateSelectedState() {
  const currentRadius = getCurrentRadius();

  document.querySelectorAll('.radius-option').forEach((button) => {
    const radiusValue = button.getAttribute('data-radius-value');

    // Convert to string for comparison to avoid type mismatch
    const isSelected = radiusValue === currentRadius.toString();

    if (isSelected) {
      button.classList.add('active');
      button.classList.add('border-foreground');
      button.classList.add('border-2');
      button.classList.remove('border-input');
    }
    else {
      button.classList.remove('active');
      button.classList.remove('border-foreground');
      button.classList.remove('border-2');
      button.classList.add('border-input');
    }
  });
}

// Initialize
function initialize() {
  updateSelectedState();
}

// Initialize after page load
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initialize);
}
else {
  initialize();
}

// Add click event for buttons
document.querySelectorAll('[data-radius-value]').forEach((button) => {
  button.addEventListener('click', () => {
    const radiusValue = parseFloat(button.getAttribute('data-radius-value') || '0');

    // Force immediate update and save to localStorage
    const forceUpdateRadius = (radius:any) => {
      // Update CSS variable
      document.documentElement.style.setProperty('--radius', `${radius}rem`);

      // Save to localStorage
      try {
        localStorage.setItem('destyler-radius', radius.toString());
      }
      catch (e) {
        console.warn(e);
      }

      // Update UI state
      updateSelectedState();
    };

    // Apply and save radius change
    forceUpdateRadius(radiusValue);

    // Trigger custom event for parent component to listen
    button.dispatchEvent(
      new CustomEvent('radius-selected', {
        detail: { value: radiusValue.toString() },
        bubbles: true,
      }),
    );
  });
});

// Add global event listener to respond to reset events
document.addEventListener('radius-selected', () => {
  // Ensure state updates in next microtask to avoid timing issues
  setTimeout(() => {
    updateSelectedState();
  }, 0);
});
</script>
