---
import ColorPickPill from '../components/ColorPickPill.astro'
import RadiusPill from '../components/RadiusPill.astro'
import ColorAppearance from '../components/ColorAppearance.astro'

import { colors } from '../unocss/theme'

const RADII = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1]
---

<destyler-theme-destyler-select>
  <button
    aria-label={Astro.locals.t('themeSelect.accessibleLabel')}
    aria-haspopup="true"
    aria-expanded="false"
    class="theme-toggle flex items-center justify-center w-8 h-8 rounded-md hover:bg-muted transition-colors"
    title={Astro.locals.t('themeSelect.accessibleLabel')}
    data-variant="ghost"
  >
    <div class="size-4 i-carbon:color-palette" />
    <span class="sr-only">Toggle Theme</span>
  </button>

  <div class="theme-popover absolute top-80% right-0 opacity-0 invisible translate-y-[-0.5rem] transition-all duration-200 z-50 w-80">
    <div
      class="
      rounded-md border border-solid border-border p-0 shadow-md
      bg-card text-card-foreground outline-none relative
      data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0
      data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
      data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2
      data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2
      "
    >
      <!-- action button -->
      <div class="absolute top-3 right-3 flex gap-2 z-10">
        <button class="popover-reset inline-flex items-center justify-center rounded-md w-7 h-7 text-muted-foreground hover:bg-muted hover:text-foreground transition-colors">
          <div class="w-4 h-4 i-carbon:reset" />
        </button>
        <button class="popover-close inline-flex items-center justify-center rounded-md w-7 h-7 text-muted-foreground hover:bg-muted hover:text-foreground transition-colors">
          <div class="w-4 h-4 i-carbon:close" />
        </button>
      </div>

      <div class="p-4">
        <!-- title -->
        <div class="grid space-y-1">
          <h1 class="text-base font-semibold text-foreground">
            Customize
          </h1>
          <p class="text-xs text-muted-foreground">
            Pick a style and color for your components.
          </p>
        </div>

        <!-- Color -->
        <div class="space-y-1.5 pt-6">
          <label for="color" class="text-xs">Color</label>
          <div class="grid grid-cols-3 gap-2 py-1.5">
            { colors.map(color => (
              <ColorPickPill
                color={color}
              />
            )) }
          </div>
        </div>
        <!-- Radius -->
        <div class="space-y-1.5 pt-6">
          <label for="color" class="text-xs">Radius</label>
          <div class="grid grid-cols-3 gap-2 py-1.5">
            { RADII.map(radius => (
              <RadiusPill
                radius={radius}
              />
            )) }
          </div>
        </div>
        <!-- theme -->
        <div class="space-y-1.5 pt-6">
          <label for="theme" class="text-xs"> Theme </label>
          <div class="flex space-x-2 py-1.5">
            <ColorAppearance />
          </div>
        </div>
      </div>
    </div>
  </div>
</destyler-theme-destyler-select>

<style>
  .theme-popover.visible {
    --at-apply: op-100 visible translate-y-0;
  }

  .theme-option.active {
    --at-apply: bg-muted font-medium;
  }

  .color-option.active span {
    --at-apply: ring-2 ring-foreground;
  }

  .radius-option.active span {
    --at-apply: ring-2 ring-foreground;
  }
</style>

<script is:inline>
  (function() {
    function loadSavedColorTheme() {
      try {
        const savedTheme = localStorage.getItem('destyler-color-theme');
        // 直接使用保存的主题或默认值
        const colorTheme = savedTheme || 'zinc';

        // 移除所有颜色主题类
        const htmlClasses = document.documentElement.classList;
        for (let i = 0; i < htmlClasses.length; i++) {
          const cls = htmlClasses[i];
          if (cls && cls.startsWith('theme-')) {
            document.documentElement.classList.remove(cls);
          }
        }

        // 应用保存的主题
        document.documentElement.classList.add(`theme-${colorTheme}`);
        return colorTheme;
      } catch (e) {
        console.error("Error loading saved color theme:", e);
        document.documentElement.classList.add('theme-zinc');
        return 'zinc';
      }
    }

    function loadSavedRadius() {
      try {
        const savedRadius = localStorage.getItem('destyler-radius');
        // 直接使用保存的圆角或默认值
        const radius = savedRadius || '0.5';

        // 应用保存的圆角
        document.documentElement.style.setProperty('--radius', `${radius}rem`);
        return radius;
      } catch (e) {
        console.error("Error loading saved radius:", e);
        document.documentElement.style.setProperty('--radius', '0.5rem');
        return '0.5';
      }
    }

    // 加载亮色/暗色模式设置
    function loadSavedAppearance() {
      try {
        const savedTheme = localStorage.getItem('theme');
        // 如果有保存的主题设置，直接使用
        if (savedTheme) {
          // 应用主题设置
          applyAppearanceTheme(savedTheme);
          return savedTheme;
        }

        // 如果没有，则检查系统偏好
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const defaultTheme = systemPrefersDark ? 'dark' : 'light';

        // 应用默认主题
        applyAppearanceTheme('system');
        return 'system';
      } catch (e) {
        console.error("Error loading saved appearance:", e);
        // 默认使用亮色模式
        applyAppearanceTheme('light');
        return 'light';
      }
    }

    // 应用亮色/暗色模式
    function applyAppearanceTheme(theme) {
      // 移除现有的主题类
      document.documentElement.classList.remove('light', 'dark');

      let appliedTheme = theme;
      if (theme === 'system') {
        // 如果是系统主题，检查系统偏好
        const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        document.documentElement.classList.add(systemTheme);
        appliedTheme = systemTheme;
      } else {
        // 直接应用指定主题
        document.documentElement.classList.add(theme);
        appliedTheme = theme;
      }

      // 同步更新 data-theme 属性
      document.documentElement.setAttribute('data-theme', appliedTheme);

      // 保存到localStorage
      localStorage.setItem('theme', theme);
      return theme;
    }

    // 确保在页面很早时就应用主题和圆角
    const currentColorTheme = loadSavedColorTheme();
    const currentRadius = loadSavedRadius();
    const currentAppearance = loadSavedAppearance();

    // 设置系统主题变化监听器
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    mediaQuery.addEventListener('change', (e) => {
      // 只有当用户选择了"system"主题时才自动切换
      if (localStorage.getItem('theme') === 'system') {
        const newTheme = e.matches ? 'dark' : 'light';
        document.documentElement.classList.remove('light', 'dark');
        document.documentElement.classList.add(newTheme);
        // 同步更新 data-theme 属性
        document.documentElement.setAttribute('data-theme', newTheme);
      }
    });

    // 给全局对象添加主题管理方法，方便其他脚本调用
    window.StarlightThemeManager = window.StarlightThemeManager || {};
    window.StarlightThemeManager.getCurrentColorTheme = function() {
      return currentColorTheme;
    };
    window.StarlightThemeManager.getCurrentRadius = function() {
      return currentRadius;
    };
    window.StarlightThemeManager.getCurrentAppearance = function() {
      return currentAppearance;
    };
    window.StarlightThemeManager.setAppearance = function(theme) {
      return applyAppearanceTheme(theme);
    };

    // 调用Starlight的主题更新
    if (window.StarlightThemeProvider) {
      StarlightThemeProvider.updatePickers();
    }

    document.documentElement.classList.add('group');
  })();
</script>

<script>
  /** Key in `localStorage` to store preferences at. */
  const storageKey = {
    color: 'destyler-color-theme',
    radius: 'destyler-radius',
    appearance: 'theme'
  }

  /** 解析颜色主题，允许任何字符串值 */
  function parseColorTheme(theme: unknown): string {
    return typeof theme === 'string' && theme ? theme : 'zinc'
  }

  /** 加载主题偏好 */
  function loadColorTheme(): string {
    return parseColorTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey.color))
  }

  /** 保存主题偏好 */
  function storeColorTheme(theme: string): void {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem(storageKey.color, theme)
    }
  }

  /** 更新颜色主题 */
  function onColorThemeChange(theme: string): void {
    // 移除所有当前颜色主题类
    document.documentElement.classList.forEach((cls) => {
      if (cls.startsWith('theme-')) {
        document.documentElement.classList.remove(cls)
      }
    })

    // 添加新的颜色主题类
    document.documentElement.classList.add(`theme-${theme}`)
    storeColorTheme(theme)

    // 更新当前活动选项的样式
    const options = document.querySelectorAll('.color-option')
    options.forEach((option) => {
      if (option.getAttribute('data-color-value') === theme) {
        option.classList.add('active')
      }
      else {
        option.classList.remove('active')
      }
    })
  }

  /** 解析圆角主题，允许任何数值 */
  function parseRadiusTheme(radius: unknown): string {
    if (typeof radius === 'string' && radius) {
      return radius;
    }
    return '0.5'; // 默认值
  }

  /** 加载圆角偏好 */
  function loadRadiusTheme(): string {
    return parseRadiusTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey.radius));
  }

  /** 保存圆角偏好 */
  function storeRadiusTheme(radius: string): void {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem(storageKey.radius, radius);
    }
  }

  /** 更新圆角 */
  function onRadiusThemeChange(radius: string): void {
    document.documentElement.style.setProperty('--radius', `${radius}rem`);
    storeRadiusTheme(radius);

    // 更新当前活动选项的样式
    const options = document.querySelectorAll('.radius-option');
    options.forEach((option) => {
      if (option.getAttribute('data-radius-value') === radius) {
        option.classList.add('active');
      }
      else {
        option.classList.remove('active');
      }
    });
  }

  /** 应用亮暗模式主题 */
  function applyAppearanceTheme(theme: string): void {
    // 移除现有的主题类
    document.documentElement.classList.remove('light', 'dark');

    let appliedTheme = theme;
    if (theme === 'system') {
      // 检测系统主题偏好
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      document.documentElement.classList.add(systemTheme);
      appliedTheme = systemTheme;
    } else {
      // 直接应用指定主题
      document.documentElement.classList.add(theme);
      appliedTheme = theme;
    }

    // 同步更新 data-theme 属性
    document.documentElement.setAttribute('data-theme', appliedTheme);

    // 保存到localStorage
    try {
      localStorage.setItem('theme', theme);
    } catch (e) {
      console.warn('Failed to save theme preference:', e);
    }

    // 更新按钮状态
    updateAppearanceButtonState();
  }

  /** 更新亮暗主题按钮状态 */
  function updateAppearanceButtonState(): void {
    const currentTheme = localStorage.getItem('theme') || 'system';

    document.querySelectorAll('[data-theme-value]').forEach((button) => {
      const themeValue = button.getAttribute('data-theme-value');
      if (themeValue === currentTheme) {
        button.classList.add('active');
      } else {
        button.classList.remove('active');
      }
    });
  }

  customElements.define(
    'destyler-theme-destyler-select',
    class ThemeDestylerSelect extends HTMLElement {
      constructor() {
        super()
        // 初始化主题设置
        const currentColorTheme = loadColorTheme()
        onColorThemeChange(currentColorTheme)

        // 初始化圆角设置
        const currentRadiusTheme = loadRadiusTheme()
        onRadiusThemeChange(currentRadiusTheme)

        // 元素引用
        const button = this.querySelector('.theme-toggle')
        const popover = this.querySelector('.theme-popover')

        // 添加重置按钮功能
        const resetButton = this.querySelector('.popover-reset')!.closest('button')
        resetButton?.addEventListener('click', () => {
          // 重置颜色主题到默认值
          onColorThemeChange('zinc')
          // 重置圆角到默认值 0.5
          onRadiusThemeChange('0.5')

          // 手动触发一个 radius-selected 事件来更新 UI
          const event = new CustomEvent('radius-selected', {
            detail: { value: '0.5' },
            bubbles: true
          })
          this.dispatchEvent(event)
        })

        // 添加关闭按钮功能
        const closeButton = this.querySelector('.popover-close')!.closest('button')
        closeButton?.addEventListener('click', () => {
          popover?.classList.remove('visible')
          button?.setAttribute('aria-expanded', 'false')
        })

        // 切换弹出菜单显示
        button?.addEventListener('click', (e) => {
          e.stopPropagation()
          popover?.classList.toggle('visible')
          const expanded = popover?.classList.contains('visible')
          button.setAttribute('aria-expanded', expanded ? 'true' : 'false')

          // 打开菜单时更新亮暗主题按钮状态
          if (expanded) {
            updateAppearanceButtonState()
          }
        })

        // 监听颜色选择事件（由 ColorPickPill 组件触发）
        this.addEventListener('color-selected', (e:any) => {
          console.log('Color selected:', e)
          const colorValue = e.detail.value
          onColorThemeChange(colorValue)
        })

        // 监听圆角选择事件（由 RadiusPill 组件触发）
        this.addEventListener('radius-selected', (e:any) => {
          console.log('Radius selected:', e);
          const radiusValue = e.detail.value;
          onRadiusThemeChange(radiusValue);
        });

        // 监听亮暗主题选择事件（由 ColorAppearance 组件触发）
        this.addEventListener('theme-selected', (e:any) => {
          console.log('Theme appearance selected:', e);
          const themeValue = e.detail.value;
          applyAppearanceTheme(themeValue);
        });

        // 点击外部区域关闭菜单
        document.addEventListener('click', (event) => {
          if (!this.contains(event.target as Node)) {
            popover?.classList.remove('visible')
            button?.setAttribute('aria-expanded', 'false')
          }
        })

        // 初始化时更新一次亮暗主题按钮状态
        setTimeout(() => {
          updateAppearanceButtonState()
        }, 0)
      }
    },
  )
</script>
