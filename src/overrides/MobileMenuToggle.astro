---
import { getRelativeLocaleUrl } from 'astro:i18n'
import userConfig from 'virtual:starlight-theme-destyler-config'
import { getTranslation } from '../components/NavBar.astro'
---

<button
  class="[all:unset] inline-flex h-8 w-8 items-center justify-center text-4 leading-6 text-foreground"
  id="mobile-menu-toggle"
>
  <div class="relative size-3 flex flex-col justify-around items-end" id="menu-icon">
    <span class="block w-2.5 h-[1px] bg-current rounded-full transition-all"></span>
    <span class="block w-3 h-[1px] bg-current rounded-full transition-all"></span>
    <span class="block w-1.5 h-[1px] bg-current rounded-full transition-all"></span>
  </div>
  <span class="sr-only">Toggle Menu</span>
</button>

<dialog
  id="drawer"
  class="border-none bg-transparent p-0 m-0 fixed w-full h-[calc(100%-var(--header-height,3rem))] top-[var(--header-height,3rem)] z-50 md:hidden"
>
  <div
    id="drawer-content"
    class="drawer-content transform -translate-y-full transition-transform duration-300
    fixed top-[var(--header-height,3rem)] left-0 right-0 bg-background z-50000 p-4 w-full
    h-100vh flex flex-col overflow-auto"
  >
    <nav class="flex flex-col gap-4 w-full mt-4">
      {
        userConfig.navLinks?.map((nav) => {
          const absoluteLinkRegex = /^https?:\/\//

          const link
            = !absoluteLinkRegex.test(nav.link) && Astro.currentLocale
              ? getRelativeLocaleUrl(Astro.currentLocale, nav.link)
              : nav.link
          const label = typeof nav.label === 'string' ? nav.label : getTranslation(nav.label, nav.link, 'label')
          const isExternal = absoluteLinkRegex.test(nav.link)

          return (
            <a
              href={link}
              class="flex items-center justify-between px-3 rounded-md text-lg
              font-medium transition-all border-b border-border pb-3 mb-1
              text-foreground/80 hover:text-foreground hover:bg-foreground/5
              active:scale-98 active:bg-foreground/10"
              {...nav.attrs}
            >
              <div class="flex items-center">
                <span class="mr-1">{label}</span>
                {nav.badge && <span class="text-xs bg-#adfa1d text-dark rounded-full px-2 py-0.5 ml-2">{nav.badge}</span>}
              </div>
              <div class="flex items-center">
                {isExternal && <span class="text-base op-50 i-carbon-arrow-up-right"></span>}
              </div>
            </a>
          )
        })
      }
    </nav>
  </div>
</dialog>

<style>
  /* 只保留复杂的样式，其他都移到标签上 */
  .drawer::backdrop {
    background: transparent;
  }

  dialog[open] .drawer-content {
    transform: translateY(0);
  }

  #menu-icon.active {
    justify-content: center;
    align-items: center;
  }

  #menu-icon.active span {
    position: absolute;
    margin: 0;
    width: 12px;
    height: 1.5px;
    background-color: currentColor;
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  #menu-icon.active span:nth-child(1) {
    transform: rotate(45deg);
  }

  #menu-icon.active span:nth-child(2) {
    opacity: 0;
  }

  #menu-icon.active span:nth-child(3) {
    transform: rotate(-45deg);
  }

  /* 禁止滚动时的body样式 */
  :global(body.no-scroll) {
    overflow: hidden;
    height: 100vh;
    touch-action: none;
    -ms-touch-action: none;
  }
</style>

<script>
const drawer = document.getElementById('drawer') as HTMLDialogElement
const drawerContent = document.getElementById('drawer-content')
const menuBtn = document.getElementById('mobile-menu-toggle')
const menuIcon = document.getElementById('menu-icon')

menuBtn?.addEventListener('click', () => {
  if (!drawer?.open) {
    // 打开抽屉
    drawer?.showModal()
    menuIcon?.classList.add('active') // 添加active类，显示X图标
    document.body.classList.add('no-scroll') // 禁止背景滚动
  }
  else {
    // 关闭抽屉
    drawer?.close()
    menuIcon?.classList.remove('active') // 移除active类，显示三线图标
    document.body.classList.remove('no-scroll') // 恢复背景滚动
  }
})

// 点击背景关闭对话框
drawer?.addEventListener('click', (e) => {
  const rect = drawerContent?.getBoundingClientRect()
  if (rect
    && (e.clientY < rect.top
      || e.clientY > rect.bottom
      || e.clientX < rect.left
      || e.clientX > rect.right)) {
    drawer.close()
    menuIcon?.classList.remove('active')
    document.body.classList.remove('no-scroll') // 恢复背景滚动
  }
})
</script>
